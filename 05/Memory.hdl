// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    //Choose level 0
    Mux16(a=temp00 ,b=temp01 ,sel=address[14] ,out=out ); /* Selects between two 16-bit inputs */
    DMux(in=load ,sel=address[14] ,a=load00 ,b=load01 );

    //0x0000-0x4000
    RAM16K(in=in ,load=load00 ,address=address[0..13] ,out=temp00 ); /* 16K RAM */
    
    //Choose level 1
    Mux16(a=temp10 ,b=temp11 ,sel=address[13] ,out=temp01 ); /* Selects between two 16-bit inputs */
    DMux(in=load01 ,sel=address[13] ,a=load10 ,b=load11 );

    //0x4000-0x5FFF
    //Choose level 2
    //Mux16(a=temp20 ,b=temp21 ,sel=address[12] ,out=temp10 ); /* Selects between two 16-bit inputs */
    //DMux(in=load10 ,sel=address[12] ,a=load20 ,b=load21 );
    
    //RAM4K(in=in ,load=load20 ,address=address[0..11] ,out=temp20 ); /* 4K RAM */
    //RAM4K(in=in ,load=load21 ,address=address[0..11] ,out=temp21 ); /* 4K RAM */
    
    Screen(in=in ,load=load10 ,address=address[0..12] ,out=temp10 );
    //0x6000 - level 1
    Keyboard(out=temp11 );  /* Keyboard memory map (built-in) */
    //Register(in=in ,load=load11 ,out=temp11 ); /* 16-bit register */
}