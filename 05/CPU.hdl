// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //if instruction[15]==0:
    //    loadD=0
    //    loadA=1
    //    writeM=0
    //    incPC=1
    //    loadPC=0
    Not(in=instruction[15] ,out=instTypeA );
    And(a=instruction[15] ,b=instruction[4] ,out=loadD );
    And(a=instruction[15] ,b=instruction[5] ,out=tempA );
    Or(a=instTypeA ,b=tempA ,out=loadA );
    And(a=loadPC0,b=instruction[15] ,out=loadPC );
    And(a=instruction[3],b=instruction[15] ,out=writeM );

    ARegister(in=Ain ,load=loadA ,out=Aout,out[0..14]=addressM ); /* Address register (built-in) */
    DRegister(in=ALUout ,load=loadD ,out=Dout ); /* Data register (built-in) */
    ALU(x=Dout ,y=ALUin ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=ALUout ,out=outM,zr=zr ,ng=ng ); /* Hack ALU */
    Mux16(a=Aout ,b=inM ,sel=instruction[12] ,out=ALUin ); /* Selects between two 16-bit inputs */
    Mux16(a=instruction ,b=ALUout ,sel=instruction[15] ,out=Ain ); /* Selects between two 16-bit inputs */
    
    //Control for PC
    Not(in=zr ,out=dnot ); /* Not gate */
    Not(in=ng ,out=enot ); /* Not gate */
    
    And(a=instruction[1] ,b=zr ,out=temp10 ); /* And gate */
    
    And(a=instruction[0] ,b=dnot ,out=temp00 ); /* And gate */
    And(a=temp00 ,b=enot ,out=temp11 ); /* And gate */

    And(a=instruction[2] ,b=dnot ,out=temp01 ); /* And gate */
    And(a=temp01 ,b=ng ,out=temp12 ); /* And gate */
    
    Or(a=temp11 ,b=temp10 ,out=temp20 ); /* And gate */
    Or(a=temp20 ,b=temp12 ,out=loadPC0 ); /* Or gate */
    
    Not(in=loadPC ,out=incPC ); /* Not gate */
    
    PC(in=Aout ,load=loadPC ,inc=incPC ,reset=reset ,out[0..14]=pc ); /* Program Counter */

}