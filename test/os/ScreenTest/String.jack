// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength>0){
            let str=Array.new(maxLength);
        }else{
            let str=null;
        }
        let length=0;
        let maxLen=maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(~(str=null)){
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(~(j<length)){
            do Sys.error(16);
        }
        let str[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length=maxLen){
            do Sys.error(15);
        }
        let str[length]=c;
        let length=length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length=0){
            do Sys.error(14);
        }
        let length=length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        //implement the string2int algorithm
        var int i,sum;
        var boolean is_neg;
        let i =0;
        let sum=0;
        let is_neg=false;
        if(str[0]=45){
            let is_neg=true;
            let i=i+1;
        }
        while(i<length & (str[i]>47) & (str[i]<58)){
            let sum=sum*10;
            let sum=sum+(str[i]-48);
            let i=i+1;
        }
        if(is_neg){
            let sum=-sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        //implement the int2String algorithm
        var int rem,len,temp;
        let len=0;
        //negative sign
        if(val<0){
            let str[0]=45;
            let val=-val;
            let len=1;
        }
        //length of string required for the number
        let temp=val;
        while(temp>0){
            let temp=temp/10;
            let len=len+1;
        }
        let length=len;
        //write the vale to string
        while(val>0){
            let rem = val-((val/10)*10) ;
            let val=val/10;
            let len = len -1;
            let str[len]=(48+rem);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
