// File name: projects/09/SnakeAndApple/Snake.jack

/** Implements a graphical snake. */
class Snake {

   field Array x, y; // screen location of the snake
   field int size; // length of this snake's body , in pixels
   field int length; // length of this snake
   field int head,tail; // characteristic of snake
   field int direction; //direction in which snake is travelling
   field int delay; //delay before next movement
   /** Constructs a new snake with a given location and size. */
   constructor Snake new(int Asize) {
      let size = 16;
      let length = Asize;
      let x=Array.new(length);
      let y=Array.new(length);
      let direction = 4;
      let delay=500;
      do initSnake();
      do draw();
      return this;
   }
   /** Draws the snake on the screen. */
   method void initSnake() {
      var int i;
      var int sum;
      let sum = 0;
      let i = 0;
      while (i < (length-1)) {
         let x[i] = sum;
         let y[i] = 0;
         let sum = sum + 16;
         let i = i + 1;
      }
      let x[length-1] = sum;
      let y[length-1] = 0;
      let head=length-1;
      let tail=0;
      return;
   }
   /** Increases the length of the snake and draws on the screen. */
   method void incLength() {
      var Array tempx,tempy;
      var int i,j;
      let tempx =Array.new(length+1);
      let tempy =Array.new(length+1);
      //head to 0
      let i=head;
      let j=length;
      while (~(i < 0)) {
         let tempx[j] = x[i];
         let tempy[j] = y[i];
         //do Output.printInt(x[i]);
         //do Output.printChar(65);
         //do Output.printInt(y[i]);
         //do Output.println();
      
         let i = i - 1;
         let j = j - 1;
      }
      //length-1 to head+1
      let i = length-1;
      while (~(i < (head+1))) {
         let tempx[j] = x[i];
         let tempy[j] = y[i];
         //do Output.printInt(x[i]);
         //do Output.printChar(65);
         //do Output.printInt(y[i]);
         //do Output.println();
         
         let i = i - 1;
         let j = j - 1;
      }
      let head = length;
      let tail = 0;
      //tail will be erased again in the next cycle
      //then head will be written
      let tempx[tail]=tempx[head];
      let tempy[tail]=tempy[head];
      //dispose array 
      do Memory.deAlloc(x);
      do Memory.deAlloc(y);
      let x=tempx;
      let y=tempy;
      let length = length + 1;
      //do Output.printInt(x[tail]);
      //do Output.printChar(65);
      //do Output.printInt(y[tail]);
      //do Output.println();
      return;
   }
   /** Disposes this snake. */
   method void dispose() {
      do Memory.deAlloc(x);
      do Memory.deAlloc(y);
      do Memory.deAlloc(this);
      return;
   }
   
   method int getHeadX(){
      return x[head];
   }
   method int getHeadY(){
      return y[head];
   }
   method int getTailX(){
      return x[tail];
   }
   method int getTailY(){
      return y[tail];
   }
   /** Moves the snake on the screen. */
   method void move() {
      //do Output.printInt(x[head]);
      //do Output.printChar(65);
      //do Output.printInt(y[head]);
      //do Output.println();
      //do Output.printString("Hit a Wall");
         
      if (direction = 1) { 
         do moveUp(); 
      } else {
         if (direction = 2) { 
            do moveDown(); 
         } else {
            if (direction = 3) { do moveLeft(); 
            } else {
               if (direction = 4) { 
                  do moveRight();
               } 
            }
         }
      }
      do Sys.wait(delay);  // delays the next movement
      return;
   }

   /** Set the direction of the snake on the screen. */
   method void setDirection(int d) {
      let direction=d;
      return;
   }
   /** Inrease the speed of the snake on the screen. */
   method void incSpeed(){
      do Output.printInt(delay);
      let delay =delay-50;
      return;
   }
   /** Decrease the speed of the snake on the screen. */
   method void decSpeed(){
      do Output.printInt(delay);
      let delay =delay+50;
      return;
   }
   /** Draws the snake on the screen. */
   method void draw() {
      var int i;
      let i = 0;
      while (i < (length-1)) {
         do drawBody(x[i],y[i]);
         let i = i + 1;
      }
      do drawHeadRight(x[length-1],y[length-1]);
      return;
   }

   /** Erases the snake from the screen. */
   method void erase() {
      var int i;
      let i = 0;
      do Screen.setColor(false);
      while (i < length) {
         do Screen.drawRectangle(x[i], y[i], x[i] + size-1, y[i] + size-1);
      }
      return;
   }

   /** Erases a body from the snake from the screen. */
   method void eraseBody(int x,int y) {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size-1, y + size-1);
      return;
   }

   /** Moves the snake up . */
   method void moveUp() {
      var int temp_x,temp_y;
      //do Output.printString("Up");
      do preMove();
      let temp_y=y[head]-size;
      let temp_x=x[head];
      if (temp_y < 0) {
         //hit a wall
         let direction = 4;
         do moveRight();
         return;
      } else {
         do drawHeadUp(temp_x,temp_y);
      }
      do postMove(temp_x,temp_y);
      return;
   }

   /** Moves the snake down . */
   method void moveDown() {
      var int temp_x,temp_y;
      //do Output.printString("down");
      do preMove();
      let temp_y=y[head]+size;
      let temp_x=x[head];
      if (temp_y > (256-size)) {
         //hit a wall
         let direction = 3;
         do moveLeft();
         return;
      } else {
         do drawHeadDown(temp_x,temp_y);
      }
      do postMove(temp_x,temp_y);
      return;
   }

   /** Moves the snake left . */
   method void moveLeft() {
      var int temp_x,temp_y;
      //do Output.printString("left");
      do preMove();
      let temp_y=y[head];
      let temp_x=x[head]-size;
      if (temp_x < 0) {
         //hit a wall
         let direction = 1;
         do moveUp();
         return;
      } else {
         do drawHeadLeft(temp_x,temp_y);
      }
      do postMove(temp_x,temp_y);
      return;
   }

   /** Moves the snake right . */
   method void moveRight() {
      var int temp_x,temp_y;
      //do Output.printString("Right");
      do preMove();
      let temp_y=y[head];
      let temp_x=x[head]+size;
      if (temp_x > (512-size)) {
         //hit a wall
         let direction = 2;
         do moveDown();
         return;
      } else {
         do drawHeadRight(temp_x,temp_y);
      }
      do postMove(temp_x,temp_y);
      return;
   }
   
   method void preMove(){
      if(~(head=tail)){
         do eraseBody(x[tail],y[tail]);
         do drawBody(x[head],y[head]);
      }
      //do Output.printInt(x[head]);
      //do Output.printChar(65);
      //do Output.printInt(y[head]);
      //do Output.println();
      return;
   }
   method void postMove(int temp_x,int temp_y){
      let x[tail]=temp_x;
      let y[tail]=temp_y;
      let head=tail;
      let tail = tail + 1;
      if( tail > (length -1 )){
         let tail=0;
      }
      return;
   }

   /** draws the snake body. */
   method void drawBody(int x,int y) {
      var int memAddress;
      let memAddress = 16384 + getLocation(x,y);
      do Memory.poke(memAddress+0, 2016);
      do Memory.poke(memAddress+32, 4080);
      do Memory.poke(memAddress+64, 8184);
      do Memory.poke(memAddress+96, 16380);
      do Memory.poke(memAddress+128, 32766);
      do Memory.poke(memAddress+160, -1);
      do Memory.poke(memAddress+192, -1);
      do Memory.poke(memAddress+224, -1);
      do Memory.poke(memAddress+256, -1);
      do Memory.poke(memAddress+288, -1);
      do Memory.poke(memAddress+320, -1);
      do Memory.poke(memAddress+352, 32766);
      do Memory.poke(memAddress+384, 16380);
      do Memory.poke(memAddress+416, 8184);
      do Memory.poke(memAddress+448, 4080);
      do Memory.poke(memAddress+480, 2016);
      return;
   }

   /** draws the snake head up . */
   method void drawHeadUp(int x,int y) {
      var int memAddress;
      let memAddress = 16384 + getLocation(x,y);
      do Memory.poke(memAddress+0, 6168);
      do Memory.poke(memAddress+32, 15420);
      do Memory.poke(memAddress+64, 31806);
      do Memory.poke(memAddress+96, 32382);
      do Memory.poke(memAddress+128, -385);
      do Memory.poke(memAddress+160, -385);
      do Memory.poke(memAddress+192, -385);
      do Memory.poke(memAddress+224, -1);
      do Memory.poke(memAddress+256, -1);
      do Memory.poke(memAddress+288, -1);
      do Memory.poke(memAddress+320, -1);
      do Memory.poke(memAddress+352, 32766);
      do Memory.poke(memAddress+384, 16380);
      do Memory.poke(memAddress+416, 16380);
      do Memory.poke(memAddress+448, 8184);
      do Memory.poke(memAddress+480, 2016);
      return;
   }

   /** draws the snake head down . */
   method void drawHeadDown(int x,int y) {
      var int memAddress;
      let memAddress = 16384 + getLocation(x,y);
      do Memory.poke(memAddress+0, 2016);
      do Memory.poke(memAddress+32, 8184);
      do Memory.poke(memAddress+64, 16380);
      do Memory.poke(memAddress+96, 16380);
      do Memory.poke(memAddress+128, 32766);
      do Memory.poke(memAddress+160, -1);
      do Memory.poke(memAddress+192, -1);
      do Memory.poke(memAddress+224, -1);
      do Memory.poke(memAddress+256, -1);
      do Memory.poke(memAddress+288, -385);
      do Memory.poke(memAddress+320, -385);
      do Memory.poke(memAddress+352, -385);
      do Memory.poke(memAddress+384, 32382);
      do Memory.poke(memAddress+416, 31806);
      do Memory.poke(memAddress+448, 15420);
      do Memory.poke(memAddress+480, 6168);
      return;
   }

   /** draws the snake head left . */
   method void drawHeadLeft(int x,int y) {
      var int memAddress;
      let memAddress = 16384 + getLocation(x,y);
      do Memory.poke(memAddress+0, 2032);
      do Memory.poke(memAddress+32, 4092);
      do Memory.poke(memAddress+64, 16382);
      do Memory.poke(memAddress+96, 32767);
      do Memory.poke(memAddress+128, 32767);
      do Memory.poke(memAddress+160, -2);
      do Memory.poke(memAddress+192, -8);
      do Memory.poke(memAddress+224, -128);
      do Memory.poke(memAddress+256, -128);
      do Memory.poke(memAddress+288, -8);
      do Memory.poke(memAddress+320, -2);
      do Memory.poke(memAddress+352, 32767);
      do Memory.poke(memAddress+384, 32767);
      do Memory.poke(memAddress+416, 16382);
      do Memory.poke(memAddress+448, 4092);
      do Memory.poke(memAddress+480, 2032);
      return;
   }

   /** draws the snake head right . */
   method void drawHeadRight(int x,int y) {
      var int memAddress;
      let memAddress = 16384 + getLocation(x,y);
      do Memory.poke(memAddress+0, 4064);
      do Memory.poke(memAddress+32, 16368);
      do Memory.poke(memAddress+64, 32764);
      do Memory.poke(memAddress+96, -2);
      do Memory.poke(memAddress+128, -2);
      do Memory.poke(memAddress+160, 32767);
      do Memory.poke(memAddress+192, 8191);
      do Memory.poke(memAddress+224, 511);
      do Memory.poke(memAddress+256, 511);
      do Memory.poke(memAddress+288, 8191);
      do Memory.poke(memAddress+320, 32767);
      do Memory.poke(memAddress+352, -2);
      do Memory.poke(memAddress+384, -2);
      do Memory.poke(memAddress+416, 32764);
      do Memory.poke(memAddress+448, 16368);
      do Memory.poke(memAddress+480, 4064);
      return;
   }

   /** Get the location of object gon the screen */
   method int getLocation(int x,int y) {
      var int location;
      if((x+size) > 512){
         let x=512-size;
      }
      if((y+size) > 256){
         let y=256-size;
      }
      let location=(y*32)+(x/16);
      return location;
   }
}
