// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let i=1;
        let twoToThe[0]=1;
        while(i<16){//less than log2(N) or number of bits 
            let twoToThe[i]=twoToThe[i-1]+twoToThe[i-1];
            let i=i+1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int value;
        if(x>0){
            let value=x;
        }else{
            let value=-x;
        }
        return value;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,shiftedX,i;
        let sum=0;
        let shiftedX=x;
        let i=0;
        while(i<16){//less than log2(N) or number of bits 
            if(Math.bit(y,i)){
                let sum=sum+shiftedX;
            }
            let shiftedX=shiftedX+shiftedX;
            let i=i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int value,q,temp;
        var boolean is_neg;
        let is_neg=false;
        if(x<0){ 
            let is_neg=~is_neg;
            let x=-x;
        }
        if(y<0){
            let is_neg=~is_neg;
            let y=-y;
        }
        if((y>x)|(y<0)){
            let value=0;
        }else{
            let q=Math.divide(x,y+y);
            let temp=q*y;
            if((x-(temp+temp))<y){
                let value = q+q;
            }else{
                let value=q+q+1;
            }
        }
        if(is_neg){
            let value=-value;
        }
        return value;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        //Strategy : find an integer y such that y2<=x<(y+1)2
        //by performing binary search in the range 0 ... 2(n/2)-1
        var int y,j,pow2,temp;
        let y=0;
        let j=7;
        let pow2=128;
        while(~(j<0)){
            let temp=(y+pow2)*(y+pow2);
            if(~(temp > x ) & (temp>0)){
                let y=y+pow2;
            }
            let pow2=pow2/2;
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int value;
        if(a>b){
            let value=a;
        }else{
            let value=b;
        }
        return value;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int value;
        if(a<b){
            let value=a;
        }else{
            let value=b;
        }
        return value;
    }

    //Returns true if the i-th bit of x is 1 , false otherwise
    function boolean bit(int x,int i){
        var boolean value;
        let value=false;
        if(~(x & twoToThe[i] = 0)){
            let value=true;
        }
        return value;
    }
}
