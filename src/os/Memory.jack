// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram=0;
        //initial state
        //the entire heap is available
        //freeList contains one long segment
        let heap=2048;//heapBase
        let freeList=2048;
        let heap[0]=0;//next
        let heap[1]=14335;//length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array temp,prev;
        var int block;
        let temp=freeList;
        let prev=null;
        //do Output.printInt(freeList);
        //do Output.println();
        while( (~(temp=null)) & (temp[1]<(size+2)) ){
            //search freeList using best fit or first fit heuristics to obtain a segment with segement.size >= size+2
            let prev=temp;
            let temp=temp[0];
        }
        //do Output.printInt(size);
        //do Output.println();
        if(temp=null){
            //if no such segment is found , return failure (or attempt defragmentation)
            do Sys.error(1);
        }else{
            //block=base address of the found space 
            let block=temp+2;
            //update the freeList and the fields of the block to account for the allocation 
            if(temp[1]>(size+3)){
                //break the block into 2 : starts from temp+size+2
                let temp[size+2]=temp[0];
                let temp[size+3]=temp[1]-(size+2);
                let temp[1]=size+2;
                
                if(prev=null){
                    let freeList=temp+size+2;
                }else{
                    let prev[0]=temp+size+2;
                }
            }else{
                //size+2<=size of temp<size+4
                if(prev=null){
                    let freeList=temp[0];
                }else{
                    let prev[0]=temp[0];
                }
            }
            let temp[0]=null;
            //return block
        }
        return block;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        //append object to the end of the freeList
        var Array temp;
        let temp=o-2;
        let temp[0]=freeList;
        let freeList=temp;
        return;
    }

    /** Defragment the memory combine empty spaces */    
    function void defragment() {
        return;
    }
}
